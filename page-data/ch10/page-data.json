{"componentChunkName":"component---src-templates-chapter-template-js","path":"/ch10","webpackCompilationHash":"e6c6a0e3769982a1e929","result":{"data":{"mdx":{"code":{"body":"function _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\bar y\"], [\"\\\\bar y\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\bar x\"], [\"\\\\bar x\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"SS_{xy} = sum{(x - \\bar x)(y - \\bar y)}\"], [\"SS_{xy} = \\\\sum{(x - \\\\bar x)(y - \\\\bar y)}\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"SS_y = sum{(y - \\bar y)^2}\"], [\"SS_y = \\\\sum{(y - \\\\bar y)^2}\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"SS_x = sum{(x-\\bar x)^2}\"], [\"SS_x = \\\\sum{(x-\\\\bar x)^2}\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"r = \\frac{SS_{xy}}{sqrt{SS_xSS_y}}\"], [\"r = \\\\frac{SS_{xy}}{\\\\sqrt{SS_xSS_y}}\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"b = \\frac{n(sum xy) - (sum x)(sum y)}{n(sum x^2) - (sum x)^2}\"], [\"b = \\\\frac{n(\\\\sum xy) - (\\\\sum x)(\\\\sum y)}{n(\\\\sum x^2) - (\\\\sum x)^2}\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"a = \\frac{(sum y)(sum x^2) - (sum x)(sum xy)}{n(sum x^2) - (sum x)^2}\"], [\"a = \\\\frac{(\\\\sum y)(\\\\sum x^2) - (\\\\sum x)(\\\\sum xy)}{n(\\\\sum x^2) - (\\\\sum x)^2}\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"y = a + bx\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar boxStyle = {\n  width: 'fit-content',\n  border: '1px solid black',\n  padding: 16\n};\nvar Box = function Box(_ref) {\n  var children = _ref.children;\n  return mdx(\"div\", {\n    style: boxStyle\n  }, children);\n};\nvar wordList = {};\nch10Defs.forEach(function (item) {\n  wordList[item.word.toLowerCase()] = item.definition;\n});\nvar _frontmatter = {\n  \"path\": \"/ch10\",\n  \"title\": \"Chapter Ten\",\n  \"chapter\": 10\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar InlineMath = makeShortcode(\"InlineMath\");\nvar layoutProps = {\n  boxStyle: boxStyle,\n  Box: Box,\n  wordList: wordList,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref2) {\n  var components = _ref2.components,\n      props = _objectWithoutProperties(_ref2, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h5\", null, \"Regression and Correlation\"), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, mdx(\"p\", null, \"Asks \\\"Is there a relationship between two variables?\\\" and\\n\\\"How strong is that relationship?\\\"\"), mdx(\"p\", null, \"The best fitting line is the linear relationship in the data. \"), mdx(WordSpan, {\n    word: \"Residuals\",\n    definition: wordList['residuals'],\n    mdxType: \"WordSpan\"\n  }), \" are the distance each point is from the best fit line.\", mdx(\"p\", null, \"The equation for linear regression is:\"), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, mdx(InlineMath, {\n    math: String.raw(_templateObject()),\n    mdxType: \"InlineMath\"\n  })), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"y\")), \" is the \", mdx(\"mark\", null, \"dependent\"), \" variable and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"x\")), \" is\\nthe\", mdx(\"mark\", null, \"independent\"), \" variable. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"a\")), \" is the y-intercept\\nand is found with the formula:\"), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, mdx(InlineMath, {\n    math: String.raw(_templateObject2()),\n    mdxType: \"InlineMath\"\n  })), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"b\")), \" is the slope and is found with the formula:\"), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, mdx(InlineMath, {\n    math: String.raw(_templateObject3()),\n    mdxType: \"InlineMath\"\n  })), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"n\")), \" is the sample size (number of rows on the table). This is a lot\\nof work so just plug the values into a calculator like\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.hackmath.net/en/calculator/linear-regression\"\n  }), \"this one\"), \".\"), mdx(WordSpan, {\n    word: \"Linear correlation coefficient\",\n    definition: wordList['linear correlation coefficient'],\n    mdxType: \"WordSpan\"\n  }), \"(r) and \", ' ', mdx(WordSpan, {\n    word: \"Coefficient of Determination\",\n    definition: wordList['coefficient of determination'],\n    mdxType: \"WordSpan\"\n  }), ' ', \" (r\", mdx(\"sup\", null, \"2\"), \"):\", mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(Box, {\n    mdxType: \"Box\"\n  }, mdx(InlineMath, {\n    math: String.raw(_templateObject4()),\n    mdxType: \"InlineMath\"\n  }), mdx(\"p\", null, \"Where\"), mdx(InlineMath, {\n    math: String.raw(_templateObject5()),\n    mdxType: \"InlineMath\"\n  }), mdx(\"br\", null), mdx(InlineMath, {\n    math: String.raw(_templateObject6()),\n    mdxType: \"InlineMath\"\n  }), mdx(\"br\", null), mdx(InlineMath, {\n    math: String.raw(_templateObject7()),\n    mdxType: \"InlineMath\"\n  }), mdx(\"br\", null), mdx(InlineMath, {\n    math: String.raw(_templateObject8()),\n    mdxType: \"InlineMath\"\n  }), \" and \", mdx(InlineMath, {\n    math: String.raw(_templateObject9()),\n    mdxType: \"InlineMath\"\n  }), \" are the mean\"), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Positive r represents a positive association (goes up), negative r represents a negative association (goes down)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"r is always between -1 and 1\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The closer to 1 or -1 the stronger it gets\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The closer to 0 the weaker it gets\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If r is 0, this means that there is no \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"linear\"), \" correlation\"))), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(\"img\", {\n    src: scatterPlot\n  })), mdx(\"hr\", null), mdx(DefinitionList, {\n    json: ch10Defs,\n    mdxType: \"DefinitionList\"\n  }));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Chapter Ten","path":"/ch10","chapter":10}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}
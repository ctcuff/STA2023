{"componentChunkName":"component---src-templates-chapter-template-js","path":"/ch2","webpackCompilationHash":"e6c6a0e3769982a1e929","result":{"data":{"mdx":{"code":{"body":"function _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\frac{\\text{lower limit + upper limit }}{2}\"], [\"\\\\frac{\\\\text{lower limit + upper limit }}{2}\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\frac{\\text{range}}{\\text{# of classes}}\"], [\"\\\\frac{\\\\text{range}}{\\\\text{\\\\# of classes}}\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\frac{\\text{frequency}}{\\text{# of data points}}\"], [\"\\\\frac{\\\\text{frequency}}{\\\\text{\\\\# of data points}}\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\frac{\\text{frequency}}{sum \\text{frequencies}}\"], [\"\\\\frac{\\\\text{frequency}}{\\\\sum \\\\text{frequencies}}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/ch2\",\n  \"title\": \"Chapter Two\",\n  \"chapter\": 2\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h4\", null, \"Frequency\"), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Category\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Frequency\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Relative Frequency\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Ford\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"5\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"0.10\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Chevy\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"12\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"0.24\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Honda\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"6\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"0.12\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Toyota\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"12\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"0.24\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Nissan\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"10\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"0.20\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Other\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"5\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"0.10\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Total\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"50\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1.00\")))), mdx(\"p\", null, \"The total of the frequency column should be the number of\\nobservations in the data. The relative frequency is found by taking\\nthe frequency and dividing it by the total.\"), mdx(PieChart, {\n    mdxType: \"PieChart\"\n  }), mdx(\"p\", null, \"A \", mdx(\"mark\", null, \"frequency distribution\"), \" lists each category of data how many\\ntimes that data occurs.\"), mdx(\"p\", null, \"The \", mdx(\"mark\", null, \"relative frequency\"), \" is the proportion (or percent or probability which\\nis what you are looking at divided by the total amount) of observations\\nwithin a category and is found using the formula: \", mdx(InlineMath, {\n    math: String.raw(_templateObject()),\n    mdxType: \"InlineMath\"\n  })), mdx(\"p\", null, \"A \", mdx(\"mark\", null, \"relative frequency\"), \" distribution lists each category of data\\nwith the relative frequency. It is found using the\\nformula: \", mdx(InlineMath, {\n    math: String.raw(_templateObject2()),\n    mdxType: \"InlineMath\"\n  }))), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(\"h4\", null, \"Steps to make a frequency distribution\"), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, mdx(ListSpacer, {\n    mdxType: \"ListSpacer\"\n  }), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Find the range (max - min)\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Pick the number of classes to use. Usually this is between 5\\nand 20. Pick 5 classes if there is a small amount of data and 20\\nclasses if there is a lot (think 1,000).\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Find the class width: \", mdx(InlineMath, {\n    math: String.raw(_templateObject3()),\n    mdxType: \"InlineMath\"\n  }), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"always\"), \" round up to the next whole number.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create the classes. Each class has limits that determine\\nwhich values fall in each class. To find the class limits,\\nset the smallest value as the lower class limit for the first\\nclass then add the class width to the lower class limit to get\\nthe next lower class limit. Repeat until you get all the classes.\\nThe upper class limit for a class is one less than the lower limit\\nfor the next class.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Find the class boundary by subtracting 0.5 from lower class limit\\nand adding 0.5 to the upper class limit.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To find the class boundaries, subtract 0.5 from the lower class\\nlimit and add 0.5 to the upper class limit.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To find the class midpoint (you might not always need it):\\nMidpoint = \", mdx(InlineMath, {\n    math: String.raw(_templateObject4()),\n    mdxType: \"InlineMath\"\n  }))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To figure out the number of data points that fall in each class,\\ngo through each data value and see which class boundaries it is between\"))), mdx(ListSpacer, {\n    mdxType: \"ListSpacer\"\n  })), mdx(\"hr\", null), mdx(\"h4\", null, \"Stem and Leaf Plot\"), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"4|5 0\\n5|8\\n6|2 9 2 2\\n7|4 5 2\\n8|2 3\\n\")), mdx(\"p\", null, \"This data is read as 45, 40, 58, 62, 69, 62, 62, 74, 75, 72, 82, 83\")));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Chapter Two","path":"/ch2","chapter":2}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}
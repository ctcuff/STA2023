{"componentChunkName":"component---src-templates-chapter-template-js","path":"/ch3","webpackCompilationHash":"e6c6a0e3769982a1e929","result":{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"sigma^2=sqrt{\\frac{sum(x-mu)^2}{N}}\"], [\"\\\\sigma^2=\\\\sqrt{\\\\frac{\\\\sum(x-\\\\mu)^2}{N}}\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\bar x\"], [\"\\\\bar x\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"s = sqrt{\\frac{sum (x - \\bar x)^2}{n - 1}}\"], [\"s = \\\\sqrt{\\\\frac{\\\\sum (x - \\\\bar x)^2}{n - 1}}\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\frac{sum (xw)}{sum w}\"], [\"\\\\frac{\\\\sum (xw)}{\\\\sum w}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar wordList = {};\nch3Defs.forEach(function (item) {\n  wordList[item.word.toLowerCase()] = item.definition;\n});\nvar _frontmatter = {\n  \"path\": \"/ch3\",\n  \"title\": \"Chapter Three\",\n  \"chapter\": 3\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  wordList: wordList,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h5\", null, \"Mean, Median, and Mode\"), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, mdx(\"mark\", null, \"A data set can have more than one mode.\"), \"If there is a tie between two values for the most number of times then both values are the mode and the data is called bimodal (two modes). If every data point occurs the same number of times, there is no mode. If there are more than two numbers that appear the most times, then usually there is no mode.\", mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(\"p\", null, \"If there are extreme values in the data, the median is a better measure\\nof the center than the mean. If there are no extreme values, the mean\\nand the median will be similar so most people use the mean.\"), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(\"img\", {\n    src: freq\n  }), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Weighted Average\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(InlineMath, {\n    math: String.raw(_templateObject()),\n    mdxType: \"InlineMath\"\n  }), ' ', \" where \", mdx(InlineMath, {\n    math: \"w\",\n    mdxType: \"InlineMath\"\n  }), \" is the weight of the data value,\", mdx(InlineMath, {\n    math: \"x\",\n    mdxType: \"InlineMath\"\n  }))))), mdx(ListSpacer, {\n    mdxType: \"ListSpacer\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(WordSpan, {\n    word: \"Standard Deviation\",\n    definition: wordList['standard deviation'],\n    mdxType: \"WordSpan\"\n  }), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(InlineMath, {\n    math: String.raw(_templateObject2()),\n    mdxType: \"InlineMath\"\n  }), ' ', \" where \", mdx(InlineMath, {\n    math: String.raw(_templateObject3()),\n    mdxType: \"InlineMath\"\n  }), \" is the mean and\", ' ', \" \", mdx(InlineMath, {\n    math: \"n\",\n    mdxType: \"InlineMath\"\n  }), \" is the sample size.\")))), mdx(ListSpacer, {\n    mdxType: \"ListSpacer\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Population variance\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(InlineMath, {\n    math: String.raw(_templateObject4()),\n    mdxType: \"InlineMath\"\n  }), \"where \", mdx(InlineMath, {\n    math: \"\\\\mu\",\n    mdxType: \"InlineMath\"\n  }), \" (greek letter mu) is the population mean and\", ' ', \" \", mdx(InlineMath, {\n    math: \"N\",\n    mdxType: \"InlineMath\"\n  }), \" is the size of the population.\")))), mdx(\"mark\", null, \"Note: The sum of the deviation should always be zero. If is isn't, you made an error.\")), mdx(\"hr\", null), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(\"h5\", null, \"Ranking\"), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, mdx(\"p\", null, \"The kth percentile is the data value that has k% of the data at or below that value.\"), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  })), mdx(\"h5\", null, \"Example 3.3.1: Interpreting Percentile\"), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, mdx(ListSpacer, {\n    mdxType: \"ListSpacer\"\n  }), mdx(\"p\", null, \"a) What does a score of the 90\", mdx(\"sup\", null, \"th\"), \" percentile mean?\"), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, \"This means that 90% of the scores were at or below this score. (A person did the same as or better than 90% of the test takers.)\"), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(\"p\", null, \"b) What does a score of the 70th percentile mean?\"), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, \"This means that 70% of the scores were at or below this score.\")), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(\"h5\", null, \"Example 3.3.2: Percentile Versus Score\"), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, mdx(ListSpacer, {\n    mdxType: \"ListSpacer\"\n  }), mdx(\"p\", null, \"a) If the test was out of 100 points and you scored at the 80th percentile, what was your score on the test?\"), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, \"You don\\u2019t know! All you know is that you scored the same as or better than 80% of the people who took the test. If all the scores were really low, you could have still failed the test. On the other hand, if many of the scores were high you could have gotten a 95% or so.\")), mdx(Spacer, {\n    mdxType: \"Spacer\"\n  }), mdx(\"h5\", null, \"Quartiles\"), mdx(Indent, {\n    mdxType: \"Indent\"\n  }, mdx(\"p\", null, \"To find the quartiles:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Sort the data in increasing order.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Find the median, this divides the data list into 2 halves.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Find the median of the data below the median. This value is Q1.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Find the median of the data above the median. This value is Q3.\"))), mdx(\"p\", null, \"The five-number summary is the minimum, the first quartile (Q1),\\nthe median, the third quartile (Q3), and the maximum (in that order).\"), mdx(\"img\", {\n    src: boxPlot\n  })), mdx(\"hr\", null), mdx(DefinitionList, {\n    json: ch3Defs,\n    mdxType: \"DefinitionList\"\n  }));\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Chapter Three","path":"/ch3","chapter":3}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}